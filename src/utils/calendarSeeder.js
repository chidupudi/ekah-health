import { timeSlotsDB } from '../services/firebase/database';
import moment from 'moment';

// Utility function to seed calendar with time slots for testing
export const seedCalendarSlots = async (startDate, endDate) => {
  try {
    const slots = [];
    const workingHours = {
      start: 9, // 9 AM
      end: 17,  // 5 PM
    };
    const slotDuration = 30; // 30 minutes
    const workingDays = [1, 2, 3, 4, 5]; // Monday to Friday

    // Generate slots for each day in the date range
    for (let date = moment(startDate); date.isSameOrBefore(endDate); date.add(1, 'day')) {
      const dayOfWeek = date.day(); // 0 = Sunday, 1 = Monday, etc.
      
      // Skip weekends
      if (!workingDays.includes(dayOfWeek)) continue;
      
      const dateStr = date.format('YYYY-MM-DD');
      
      // Generate time slots for the day
      for (let hour = workingHours.start; hour < workingHours.end; hour++) {
        for (let minute = 0; minute < 60; minute += slotDuration) {
          const timeStr = moment().hour(hour).minute(minute).format('HH:mm');
          const endTimeStr = moment().hour(hour).minute(minute + slotDuration).format('HH:mm');
          
          // Check if we've gone past end time
          if (hour >= workingHours.end && minute > 0) break;
          
          const slotData = {
            date: dateStr,
            time: timeStr,
            endTime: endTimeStr,
            duration: slotDuration,
            status: 'available',
            createdBy: 'seeder',
            notes: 'Generated by seeder for testing'
          };
          
          slots.push(slotData);
        }
      }
    }

    // Create all slots
    console.log(`Creating ${slots.length} time slots...`);
    const createdSlots = [];
    
    for (const slotData of slots) {
      try {
        const createdSlot = await timeSlotsDB.createSlot(slotData);
        createdSlots.push(createdSlot);
      } catch (error) {
        // Slot might already exist, that's ok
        console.log(`Slot ${slotData.date} ${slotData.time} might already exist`);
      }
    }

    console.log(`Successfully created ${createdSlots.length} time slots`);
    return {
      success: true,
      created: createdSlots.length,
      total: slots.length,
      message: `Created ${createdSlots.length} out of ${slots.length} time slots`
    };

  } catch (error) {
    console.error('Error seeding calendar:', error);
    throw error;
  }
};

// Seed current week
export const seedCurrentWeek = async () => {
  const startOfWeek = moment().startOf('week');
  const endOfWeek = moment().endOf('week');
  return await seedCalendarSlots(startOfWeek, endOfWeek);
};

// Seed current month
export const seedCurrentMonth = async () => {
  const startOfMonth = moment().startOf('month');
  const endOfMonth = moment().endOf('month');
  return await seedCalendarSlots(startOfMonth, endOfMonth);
};

// Seed next 30 days
export const seedNext30Days = async () => {
  const today = moment();
  const thirtyDaysLater = moment().add(30, 'days');
  return await seedCalendarSlots(today, thirtyDaysLater);
};